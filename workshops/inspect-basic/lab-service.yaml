ingress:
  enabled: true
  ingressClassName: "cilium"

rbac:
  create: true

hub:
  readinessProbe:
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    
  extraConfig:
    # codeServerConfig.py: |
    #     # Tell the Spawner that this is not a Jupyter server
    #     c.KubeSpawner.api_endpoint = ''
        
    #     # Tell the Spawner to use port 8080 (where code-server is)
    #     # instead of the default 8888 (where jupyter is).
    #     c.KubeSpawner.port = 8080

    #     # Your custom setting to open VSCode in a specific folder.
    #     c.KubeSpawner.default_url = '/?folder=/home/coder/workspace'
    vscode-proxy: |
      # Configure jupyter-server-proxy to forward to code-server
      import os
      c.ServerProxy.servers = {
          'vscode': {
              'command': [
                  'code-server',
                  '--bind-addr', '0.0.0.0:8080',
                  '--auth', 'none',
                  '--disable-telemetry',
                  '/home/coder/workspace'
              ],
              'port': 8080,
              'timeout': 30,
              'launcher_entry': {
                  'title': 'VS Code'
              }
          }
      }
      
singleuser:
  image:
    name: "ghcr.io/nbhdai/workshop-inspect-basic"
    tag: "latest"
    pullPolicy: "Always"

  # Key: Let JupyterHub handle the startup
  cmd: ["jupyterhub-singleuser"]
  
  # Cilium is handling networking and this is blocked by default.
  cloudMetadata:
    blockWithIptables: false

  extraEnv:
    PYTHONUNBUFFERED: "1"
    OPENAI_API_KEY: "hidden"
    OPENAI_BASE_URL: "http://ai-proxy-svc/openai/"
    GOOGLE_API_KEY: "hidden"  
    GOOGLE_BASE_URL: "http://ai-proxy-svc/gemini/"
    ANTHROPIC_API_KEY: "hidden"
    ANTHROPIC_BASE_URL: "http://ai-proxy-svc/anthropic/"
    JUPYTER_ENABLE_LAB: "no"  # We don't need JupyterLab
    
  storage:
    capacity: 1Gi
    
  cpu:
    limit: 2
    guarantee: 0.5
  memory:
    limit: 2G
    guarantee: 512M

cull:
  enabled: true
  timeout: 3600
  every: 300